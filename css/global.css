/*So for CSS it is better to build generic styling and after that build specific ones*/

/* variables declared here - these are the colors for our pages, as well as the font stacks and sizes. */
:root {
    --dkblueslate: #323673;
    --drkraspberry: #8C1F66;
    --sunsetorange: #F25041;
    --hotmag: #8C1F66;
    --tangelo: #F24405;
    --aqua: #33A6A6;
    --white: #f7f8fa;
    --font-size: 1.3rem;
    --mono: "Oxygen mono", monospace;
    --sans: Oxygen, sans-serif;
}

tangelo
/* Color Theme Swatches in Hex */
/* Color Theme Swatches in Hex */
/* .Playroom-1-hex { color: #8C1F66; }
.Playroom-2-hex { color: #323673; }
.Playroom-3-hex { color: #33A6A6; }
.Playroom-4-hex { color: #F29544; }
.Playroom-5-hex { color: #F25041; }
 */


/* border box model: https://css-tricks.com/box-sizing/ */
html {
    box-sizing: border-box;
}
*,
*::before,
*::after {
    box-sizing: inherit;
}
/* generic styles for the page */
body{
    padding:0;
    margin: 0;
    /* It is necessary to put padding and margin at zero because by default each browser put a value at the margin and padding stuff */
    font-family: var(--sans);
    background-color: var(--dkblueslate);
    color: var(--white);
    font-size: var(--font-size);
}
h1,h2,h3{
    margin:0;
}
a{
    color: var(--tangelo);
}
a:hover{
    color: var(--hotmag);
    text-decoration: none;
}
img{
    width: 100%;
}

/* Background color divs */
.section-plum{
    background-color: var(--sunsetorange);
}
.section-dkblue{
    background-color: var(--drkraspberry);
}
.gradient{
    background: linear-gradient(90deg, rgba(75,13,73,1) 0%, rgba(134,251,251,1) 100%);
    height: 2px ;
}

/*INTRO STYLES*/
#intro{
    padding: 4rem 1rem 10rem 1rem;
    max-width: 1200px;
    margin: 0 auto;
}
#intro p{
    font-size: 1rem;
    line-height: 1.5; /*There is no unit for line-height as it is a proportion */
}
#intro .name{
    font-family: var(--mono);
}
.name span{
    font-family: var(--sans);
    font-size: 4rem;
    color: var(--aqua);
    display: block;
}
#intro h2{
    font-size: 4rem;
    font-weight: normal;
}
#contact{
    padding: 3rem 0;
    margin: 0 auto;
    text-align: center;
    width: 400px;

}
#contact button{
    /* color: var(--white);
    background-color: var(--hotmag) ;
    font-size: var(--font-size);
     */
     margin-top: 3rem;
}


/* Navigation Bar */
nav{
    font-family: var(--mono);
    font-size: 80%;
    padding: 1rem;
    margin: 0;
    background-color: var(--dkblueslate);

}
nav [class*="fa-"]{
    font-size: 150%;
    color: var(--aqua);
}
nav li:first-child{
    flex-basis: 100%;/*To make the first li element to take the full width of the page */
    text-align: center  ;
}
nav h2 a{
    font-family: var(--sans);
}
nav ul{
    list-style-type: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-flow: row wrap; /*To put the items on a row */
    justify-content: center;
    align-items: center;
    gap: 2rem; /*To put space between each li elements*/


}
nav a{
    color: var(--white);
    text-decoration: none;
    display: block;/*a is an inline element so putting in block will allow ot fill in the row of the page and then adap to the screensize*/
}
nav a:hover{
    color: var(--tangelo);
}
ul li{
    display: inline;
    padding: 3px;
}

/* Button styling */
.button{
    background-color: var(--tangelo);
    padding: 0.5rem;
    border-radius: 5px;
    color: var(--white);
    font-family: var(--mono);
    text-decoration: none;
}
.button_readmore{
    margin: 1rem 0;
    background-color: var(--sunsetorange);
    padding: 0.5rem;
    border-radius: 5px;
    color: var(--white);
    font-family: var(--mono);
    text-decoration: none;
}
.button:hover{
    color: var(--white);
    background-color: var(--hotmag);
}

/* Making it responsive */
@media(min-width:850px){
    nav{
        max-width: 1200px;
        margin: 0 auto;
    }
    nav li:first-child{
        flex-basis: auto;
        text-align: left;
        margin-right: auto;
    }
}

/* Contact section */
footer{
    padding: 4rem 0;
    text-align: center;
}
footer ul{
    list-style-type: none;
    padding: 0;
    margin: 2rem 0;
    display: flex;
    flex-flow: row wrap;
    justify-content: center;
    gap: 3rem;
    font-size: 3rem;
}
/* Project section */
#projects{
    padding: 4rem 1rem;
}
#projects h2{
    font-size: 2.5rem;
    margin-bottom: calc(2.5rem * 1.5);
}
#projects h3{
    color: var(--aqua);
}
#projects h4{
    font-size:1rem;
    font-family: var(--mono);
    margin: 0;
}
#projects h5{
    font-size:1rem;
    font-family: var(--mono);
    margin: 1rem 0;
    padding: 1rem 0;
}
.black-box{
    background-color: var(--dkblueslate);
    padding: 1rem;
    border-radius: 10px;
    color: var(--white);
    font-size: 1rem;
    line-height: 1.5;

}
#projects ul{
    list-style-type: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-flow: row wrap;
    justify-content: flex-start;
    gap: 1rem;
    font-size: 1rem;
}
#projects img{
    margin: 2rem 0 4rem 0;
    border-left: 1px solid var(--aqua);
    border-top: 1px solid var(--aqua);
    border-radius: 25px;
    padding: 1rem;
}
.profile_img{
       
}
/*ROLES*/
.role{
    color: var(--sunsetorange);
    font-size: 2rem;
}
/* Read More section */
.readmore{
    background-color: #323673;
}
@media (min-width: 550px){
    article{
        display: grid;
        /* Grid works on cols and rows it is efficient to allow elements to overlap */
        grid-template-columns: repeat(10,1fr); /*It will create 10 columns with equal width of 1fr each so it is like in bootstrap where I define the number of columns */
        gap: 1rem;
    }
    #projects img{
        grid-column: 1/6; /*The 2 lines are about define the number of column that the img will take out of 10 colums declared earlier with the grid=template-columns and also saying that these set of columns should be considered as a row*/
        grid-row: 1/2;
    }
    /* I did not get the real way of doing the reverse stuff */
    #projects .reverse img{
        grid-column: 6/11;
        grid-row: 1/2;
    }
    #projects .reverse .text{
        grid-column: 1/7;
        grid-row: 1/2;
        order: 2;
        text-align: left;
    }
    #projects .reverse ul{
        justify-content: flex-start;
    }
    .text{
        grid-row: 1/2; 
        grid-column: 5/11; /* The trick with 5/11 instead of 5/10 is to make the text part overlap on the image :) very helpful CSS grids*/
        order: 2; /*To change the order of the elements in the grid so then switch their position */
        text-align: right;
    }
    #projects ul{
        justify-content: flex-end;
    }
}

@media (min-width: 800px) {
    article {
        display: grid;
        grid-template-columns: repeat(10, 1fr);
    }
    #projects {
        max-width: 1200px;
        margin: 0 auto;
    }
    #projects img {
        grid-column: 1/6;
        grid-row: 1/2;
    }
    .text {
        grid-column: 5/11;
        grid-row: 1/2;
        order: 2;
        text-align: right;
    }
    #projects ul {
        justify-content: flex-end;
    }
    #projects .reverse .text {
        grid-column: 1/7;
        order: 2;
        text-align: left;
    }
    #projects .reverse img {
        grid-column: 6/11;
        grid-row: 1/2;
    }
    #projects .reverse ul {
        justify-content: flex-start;
    }
}

@media (min-width: 850px) {
    nav {
        max-width: 1200px;
        margin: 0 auto;
    }
    nav li:first-child {
        flex-basis: auto;
        text-align: left;
        margin-right: auto;
    }
}